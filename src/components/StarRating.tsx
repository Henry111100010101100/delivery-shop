import { useId } from 'react';

/**
 * Существует несколько способов реализации функционала отображения рейтинга в виде закрашенных звездочек
 * Основной момент здесь заключается в подходе к частичному закрашиванию звезд,
 * когда рейтинг представляет собой какое-то дробное значение (2.7, 4.3 и т.п.)
 *
 * Один из подходов заключается в изначальной отрисовке n-количества звезд (где n-шкала рейтинга|максимально допустимый рейтинг)
 * и последующем наложении сверху закрашенных звезд согласно конкретному значению рейтинга, динамически регулируя ширину обертки
 * Такой подход реализован в закомментированной части кода.
 *
 * Другим вариантом является использование встроенных особенностей тега svg и того, как работает градиентная заливка этого элемента.
 * Для того, чтобы реализовать градиентное закрашивание задается шаблон закрашивания внутри <defs>
 * Благодаря тождественному значению аттрибута offset внутри <stop> получается резкий переход от одного цвета к другому, что и требуется для частичного закрашивания звезд согласно дробному значению рейтинга
 * Этот подход использован в качестве основного, т.к. тут не происходит дублирования svg-элементов.
 *
 * N.B.: Из-за использования <defs> могут возникать конфликты ввиду аналогичных id внутри элементов DOM, поэтому для индивидуализации каждого компонента используется useId
 */

const TOTAL_STARS = 5;

export const StarRating = ({ rating }: { rating: number }) => {
  /** Необходимо для создания уникального id и его использования внутри <defs> */
  const instanceId = useId();

  const stars = Array.from({ length: TOTAL_STARS }, (_, index) => {
    const fillAmount = Math.max(0, Math.min(1, rating - index));
    const gradientId = `starGradient-${instanceId}-${index}`;

    return (
      <svg
        key={index}
        width="12.921875"
        height="12.386795"
        viewBox="0 0 12.9219 12.3868"
        className="w-[12.92px] h-[12.39px]"
      >
        <defs>
          <linearGradient id={gradientId} x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset={`${fillAmount * 100}%`} stopColor="#FF6633" />
            <stop offset={`${fillAmount * 100}%`} stopColor="#BFBFBF" />
          </linearGradient>
        </defs>

        <path
          d="M5.56 0.55L4.34 3.03C4.19 3.32 3.91 3.53 3.58 3.57L0.85 3.97C0.03 4.09 -0.3 5.1 0.3 5.68L2.28 7.6C2.51 7.83 2.62 8.17 2.56 8.49L2.1 11.21C1.96 12.03 2.81 12.65 3.55 12.26L5.99 10.98C6.28 10.83 6.63 10.83 6.92 10.98L9.37 12.26C10.1 12.65 10.96 12.03 10.82 11.21L10.35 8.49C10.29 8.17 10.4 7.83 10.64 7.6L12.61 5.68C13.21 5.1 12.88 4.09 12.06 3.97L9.33 3.57C9 3.53 8.72 3.32 8.57 3.03L7.35 0.55C6.99 -0.19 5.93 -0.19 5.56 0.55Z"
          fill={`url(#${gradientId})`}
        />
      </svg>
    );
  });

  return <div className="flex flex-row gap-1">{stars}</div>;
};



// export const StarRating = ({ rating }: { rating: number }) => {
//   const stars = [];
//
//   for (let i = 1; i<=TOTAL_STARS; i++) {
//     const fillAmount = Math.max(0, Math.min(1, rating - (i-1)));
//     const fillPercentage = Math.round(fillAmount * 100);
//
//     stars.push(
//       <div key={i} className="relative w-[12.92px] h-[12.39px]">
//         <svg
//           width="12.921875"
//           height="12.386795"
//           viewBox="0 0 12.9219 12.3868"
//         >
//           <path
//             id="Star 1"
//             d="M5.56 0.55L4.34 3.03C4.19 3.32 3.91 3.53 3.58 3.57L0.85 3.97C0.03 4.09 -0.3 5.1 0.3 5.68L2.28 7.6C2.51 7.83 2.62 8.17 2.56 8.49L2.1 11.21C1.96 12.03 2.81 12.65 3.55 12.26L5.99 10.98C6.28 10.83 6.63 10.83 6.92 10.98L9.37 12.26C10.1 12.65 10.96 12.03 10.82 11.21L10.35 8.49C10.29 8.17 10.4 7.83 10.64 7.6L12.61 5.68C13.21 5.1 12.88 4.09 12.06 3.97L9.33 3.57C9 3.53 8.72 3.32 8.57 3.03L7.35 0.55C6.99 -0.19 5.93 -0.19 5.56 0.55Z"
//             fill="#BFBFBF"
//             fill-opacity="1.000000"
//           />
//         </svg>
//
//         {fillAmount > 0 && (
//           <div className='absolute top-0 left-0 h-full overflow-hidden' style={{ width: `${fillPercentage}%`}}>
//             <svg
//               width="12.921875"
//               height="12.386795"
//               viewBox="0 0 12.9219 12.3868"
//             >
//               <path
//                 id="Star 1"
//                 d="M5.56 0.55L4.34 3.03C4.19 3.32 3.91 3.53 3.58 3.57L0.85 3.97C0.03 4.09 -0.3 5.1 0.3 5.68L2.28 7.6C2.51 7.83 2.62 8.17 2.56 8.49L2.1 11.21C1.96 12.03 2.81 12.65 3.55 12.26L5.99 10.98C6.28 10.83 6.63 10.83 6.92 10.98L9.37 12.26C10.1 12.65 10.96 12.03 10.82 11.21L10.35 8.49C10.29 8.17 10.4 7.83 10.64 7.6L12.61 5.68C13.21 5.1 12.88 4.09 12.06 3.97L9.33 3.57C9 3.53 8.72 3.32 8.57 3.03L7.35 0.55C6.99 -0.19 5.93 -0.19 5.56 0.55Z"
//                 fill="#FF6633"
//                 fill-opacity="1.000000"
//               />
//             </svg>
//           </div>
//         )}
//       </div>
//     );
//
//   }
//
//
//   return <div className="flex flex-row gap-1">{stars}</div>
// }
